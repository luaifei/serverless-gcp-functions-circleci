version: 2.1
executors:
    my-executor:
        docker:
            - image: circleci/python:3.7.2

commands:
    set-up:
        description:  "Set up env for serverless"
        steps:
            - checkout
            - run:
                command: |
                    curl -sL https://deb.nodesource.com/setup_12.x | sudo bash -
                    sudo apt-get install -y nodejs npm
                    npm install
    deploy:
        description: "Deploy functions to GCP"
        parameters:
            service-key:
                type: string
                default: "DEVELOPMENT_SERVICE_KEY"
            project-id:
                type: string
                default: "digitaloptimisation-dev"
        steps:
            - run: export PROJECT_ID=<<parameters.project-id>>
            - run: echo $<<parameters.service-key>> > ${HOME}/.gcloud/keyfile.json
            - run: serverless deploy

jobs:
    security-checks:
        docker:
            - image: docker:stable
        steps:
            - checkout
            - setup_remote_docker
            - run:
                command: |
                    chmod +x .circleci/security_checks.sh
                    sh .circleci/security_checks.sh
            - store_artifacts:
                path: /tmp/artifacts/hawkeye_report.json

    build:
        executor: my-executor
        working_directory: ~/repo
        steps:
            - checkout
            - run:
                command: |
                    python3 -m venv venv
                    . venv/bin/activate
                    chmod +x .circleci/static-code-check.sh
                    sh .circleci/static-code-check.sh
                    chmod +x .circleci/unit-test.sh
                    sh .circleci/unit-test.sh
            - store_test_results:
                path: test-results

    deploy-dev:
        executor: my-executor
        working_directory: ~/repo
        steps:
            - set-up
            - deploy

    deploy-staging:
        executor: my-executor
        working_directory: ~/repo
        steps:
            - set-up
            - deploy:
                service-key: STAGING_SERVICE_KEY
                project-id: digitaloptimisation-staging

    deploy-prod:
        executor: my-executor
        working_directory: ~/repo
        steps:
            - set-up
            - deploy:
                service-key: PROD_SERVICE_KEY
                project-id: digitaloptimisation-prod

workflows:
    version: 2
    build-deploy:
        jobs:
            - build:
            - hold-to-dev:
                  type: approval
                  requires:
                      - build
            - deploy-dev:
                  requires:
                      - hold-to-dev

nightly:
    triggers:
        - schedule:
            cron: "0 1 * * *"
            filters:
                branches:
                    only:
                        - master
    jobs:
        - security-checks
